#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include "macros.dtsi"
#include "behaviors.dtsi"
#include "combos.dtsi"

#define U_TAPPING_TERM 200

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {

    /* input config for mouse move mode */
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 1 2 3 4>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <4>;
        scale-divisor = <5>;
        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */
    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";   
        device = <&vtrackball>;
        layers = <5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */
    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <6>;
        evt-type = <INPUT_EV_REL>;            
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */
    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TILDE   &kp N1       &kp N2      &kp N3      &kp N4        &kp N5           &kp N6                   &kp N7        &kp N8      &kp N9      &kp N0          &kp MINUS
&kp TAB     &kp Q        &kp W       &kp E       &kp R         &kp T                    &kp Y            &kp U         &kp I       &kp O       &kp P           &kp LBKT
&kp ESC     &mt LCTRL A  &mt LALT S  &mt LGUI D  &mt LSHIFT F  &kp G                    &kp H            &mt RSHIFT J  &mt RGUI K  &mt RALT L  &mt RCTRL SEMI  &kp APOS
&kp LSHIFT  &kp Z        &kp X       &kp C       &kp V         &kp B                    &kp N            &kp M         &kp COMMA   &kp DOT     &kp FSLH        &kp RSHIFT
                                     &kp LGUI    &kp SPACE     &lt 1 TAB                &lt 2 BACKSPACE  &kp SPACE
                                                 &kp DEL       &lt 2 BACKSPACE          &lt 1 ENTER
            >;
        };

        NAV {
            bindings = <
&kp F12          &kp F1          &kp F2           &kp F3             &kp F4           &kp F5    &kp F6                   &kp F7  &kp F8  &kp F9  &kp F10    &kp F11
&trans           &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp UP             &kp EQUAL        &kp LBRC          &kp RBRC         &kp N7  &kp N8  &kp N9  &kp PLUS   &trans
&kp PRINTSCREEN  &kp INSERT      &kp LEFT         &kp DOWN           &kp RIGHT        &kp LBKT          &kp RBKT         &kp N4  &kp N5  &kp N6  &kp MINUS  &kp FSLH
&trans           &kp DEL         &kp PG_UP        &kp CAPS           &kp PG_DN        &kp LPAR          &kp RPAR         &kp N1  &kp N2  &kp N3  &kp RET    &trans
                                                  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans            &lt 3 BACKSPACE  &kp N0
                                                                     &trans           &trans            &kp DOT
            >;
        };

        SYM {
            bindings = <
&kp F12  &kp F1         &kp F2     &kp F3             &kp F4            &kp F5         &kp F6                      &kp F7            &kp F8     &kp F9        &kp F10        &kp F11
&trans   &kp EXCL       &kp AT     &kp HASH           &kp DLLR          &kp PRCNT              &kp CARET           &kp AMPS          &kp STAR   &kp QUESTION  &kp SQT        &trans
&trans   &kp PLUS       &kp EQUAL  &kp LPAR           &kp RPAR          &kp DQT                &kp COLON           &kp LBKT          &kp RBKT   &kp LBRC      &kp RBRC       &trans
&trans   &kp LESS_THAN  &kp PIPE   &kp MINUS          &kp GREATER_THAN  &kp BACKSLASH          &kp GRAVE           &kp UNDERSCORE    &kp SLASH  &kp TILDE     &kp SEMICOLON  &trans
                                   &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &mo 3                  &trans              &kp C_PLAY_PAUSE
                                                      &trans            &trans                 &kp C_FAST_FORWARD
            >;
        };

        ADJ {
            bindings = <
&trans  &trans       &trans          &trans            &trans             &trans           &trans          &trans     &trans     &trans     &trans  &trans
&trans  &sys_reset   &bt BT_PRV      &bt BT_NXT        &bt BT_CLR         &out OUT_TOG             &trans  &trans     &trans     &trans     &trans  &trans
&trans  &bootloader  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT         &kp C_MUTE               &trans  &mkp LCLK  &mkp RCLK  &mkp MCLK  &trans  &trans
&trans  &trans       &mo 5           &trans            &kp C_VOLUME_DOWN  &kp C_VOLUME_UP          &trans  &trans     &trans     &trans     &trans  &trans
                                     &trans            &trans             &trans                   &trans  &trans
                                                       &trans             &trans                   &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans          &trans  &trans
                                &trans  &trans          &trans
            >;
        };

        SNIP {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans          &trans  &trans
                                &trans  &trans          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans          &trans  &trans
                                &trans  &trans          &trans
            >;
        };
    };
};
